{"version":3,"sources":["routes/Views/Authentication/Authentication.js"],"names":["connect","dispatch","changeCurrentPage","title","type","authType","useParams","history","useHistory","useState","userEmail","password","rememberMe","loginState","setLoginState","fullName","email","confirmPass","regState","setRegState","authTitle","setAuthTitle","useEffect","pageTitle","changeInput","e","isLogin","target","name","val","checked","value","undefined","id","className","toLowerCase","onSubmit","preventDefault","Object","values","every","toastify","msg","onSubmission","htmlFor","autoFocus","required","onChange","placeholder","autoComplete","onClick","push"],"mappings":"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","file":"static/js/10.bc69b01d.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { toastify } from \"../../../utilities/utilities\";\nimport \"./Authentication.scss\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nconst Authentication = ({ changeCurrentPage }) => {\n  const { authType } = useParams();\n  const history = useHistory();\n  // states\n  const [loginState, setLoginState] = useState({\n    userEmail: \"\",\n    password: \"\",\n    rememberMe: false,\n  });\n  const [regState, setRegState] = useState({\n    fullName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPass: \"\",\n  });\n  const [authTitle, setAuthTitle] = useState(\"login\");\n\n  //end of states\n  useEffect(() => {\n    const pageTitle = authType === \"login\" ? \"Login\" : \"Sign Up\";\n    setAuthTitle(pageTitle);\n    changeCurrentPage(pageTitle);\n  }, [changeCurrentPage, authType]);\n  const changeInput = (e, isLogin) => {\n    const target = e.target;\n    const name = target.name;\n    const val =\n      target.type === \"checkbox\" || target.type === \"radio\"\n        ? target.checked\n        : target.value;\n    if (typeof val !== undefined && name) {\n      if (isLogin) {\n        setLoginState({\n          ...loginState,\n          [name]: val,\n        });\n      } else {\n        setRegState({\n          ...regState,\n          [name]: val,\n        });\n      }\n    }\n  };\n  const onSubmission = (e) => {\n    e.preventDefault();\n    if (authType.toLowerCase() === \"login\") {\n      Object.values(loginState).every((val) => val !== \"\" && val !== undefined)\n        ? toastify({ msg: \"Fake logged in!\", type: \"success\" })\n        : toastify({\n            msg: \"Please fill all input fields above.\",\n            type: \"Fail\",\n          });\n    } else if (authType.toLowerCase() === \"signup\") {\n      Object.values(regState).every((val) => val !== \"\" && val !== undefined)\n        ? toastify({ msg: \"Fake signed up!\", type: \"success\" })\n        : toastify({\n            msg: \"Please fill all input fields above.\",\n            type: \"Fail\",\n          });\n    }\n  };\n\n  return (\n    <Fragment>\n      <div id=\"auth\" className=\"flex-column\">\n        <div className=\"auth--inner\">\n          <div className=\"auth--header\">\n            <h2>{authTitle}</h2>\n            <p className=\"auth--directions\">\n              {authType.toLowerCase() === \"login\"\n                ? \"Enter Login details to get access\"\n                : \"Create your account to get full access\"}\n            </p>\n          </div>\n          <div className=\"login--reg--inner\">\n            <form onSubmit={(e) => onSubmission(e)}>\n              {/* LOGIN */}\n              {authType.toLowerCase() === \"login\" ? (\n                <>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"userEmail\">Username Or Email Address</label>\n                    <input\n                      autoFocus\n                      required\n                      type=\"text\"\n                      id=\"userEmail\"\n                      value={loginState.userEmail}\n                      onChange={(e) => changeInput(e, true)}\n                      placeholder=\"Username / Email address\"\n                      name=\"userEmail\"\n                    />\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label required htmlFor=\"loginPassword\">\n                      Password\n                    </label>\n                    <input\n                      autoComplete=\"off\"\n                      type=\"password\"\n                      id=\"loginPassword\"\n                      value={loginState.password}\n                      onChange={(e) => changeInput(e, true)}\n                      placeholder=\"Password\"\n                      name=\"password\"\n                    />\n                  </div>\n\n                  <div className=\"remember--me flex-row\">\n                    <span className=\"flex-row\">\n                      <input\n                        id=\"rememberMe\"\n                        value={loginState.rememberMe}\n                        onChange={(e) => changeInput(e, true)}\n                        type=\"checkbox\"\n                        name=\"rememberMe\"\n                      />\n                      <label htmlFor=\"rememberMe\">Keep Me Logged In</label>\n                    </span>\n                    <span>Forgot Password?</span>\n                  </div>\n\n                  <div className=\"auth--footer flex-row\">\n                    <span>\n                      Donâ€™t have an account?{\" \"}\n                      <span\n                        onClick={() => history.push(\"/auth/signup\")}\n                        className=\"auth--switch--btn\"\n                      >\n                        Sign Up\n                      </span>{\" \"}\n                      here\n                    </span>\n                    <button className=\"auth--submit--btn\" type=\"submit\">\n                      {authTitle}\n                    </button>\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"fullName\">Full Name</label>\n                    <input\n                      autoFocus\n                      required\n                      type=\"text\"\n                      id=\"fullName\"\n                      value={regState.fullName}\n                      onChange={(e) => changeInput(e, false)}\n                      placeholder=\"Enter full name\"\n                      name=\"fullName\"\n                    />\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label htmlFor=\"email\">Email Address</label>\n                    <input\n                      autoFocus\n                      required\n                      type=\"text\"\n                      id=\"email\"\n                      value={regState.email}\n                      onChange={(e) => changeInput(e, false)}\n                      placeholder=\"Enter email address\"\n                      name=\"email\"\n                    />\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label required htmlFor=\"signUpPassword\">\n                      Password\n                    </label>\n                    <input\n                      type=\"password\"\n                      id=\"signUpPassword\"\n                      value={regState.password}\n                      onChange={(e) => changeInput(e, false)}\n                      placeholder=\"Password\"\n                      name=\"password\"\n                    />\n                  </div>\n\n                  <div className=\"form-group\">\n                    <label required htmlFor=\"confirmPassword\">\n                      Confirm Password\n                    </label>\n                    <input\n                      autoComplete=\"off\"\n                      type=\"password\"\n                      id=\"confirmPassword\"\n                      value={regState.confirmPass}\n                      onChange={(e) => changeInput(e, false)}\n                      placeholder=\"Password\"\n                      name=\"confirmPass\"\n                    />\n                  </div>\n\n                  <div className=\"auth--footer flex-row\">\n                    <span>\n                      Already have an account?{\" \"}\n                      <span\n                        onClick={() => history.push(\"/auth/login\")}\n                        className=\"auth--switch--btn\"\n                      >\n                        Login\n                      </span>{\" \"}\n                      here\n                    </span>\n                    <button className=\"auth--submit--btn\" type=\"submit\">\n                      {authTitle}\n                    </button>\n                  </div>\n                </>\n              )}\n            </form>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    changeCurrentPage: (title) => dispatch({ type: \"changePageTitle\", title }),\n  };\n};\nexport default connect(null, mapDispatchToProps)(Authentication);\n"],"sourceRoot":""}